---
version: '3'

volumes:
  traefik-certs:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  zookeeper-1-data:
  zookeeper-2-data:
  client-data:

services:
  traefik:
    image: traefik:v2.8
    container_name: traefik
    hostname: traefik
    command: # Please make sure that changes are reflected in docker-compose-devel.yml too
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.caserver=${ACME_SERVER}"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/certs/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/certs
      - /var/lib/ca-certificates/ca-bundle.pem:/etc/ssl/certs/ca-certificates.crt:ro
    restart: unless-stopped
  zookeeper-1:
    container_name: zookeeper-1
    image: 'bitnami/zookeeper:3.8.0'
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_SERVER_USERS=${KAFKA_ZOOKEEPER_USER}
      - ZOO_SERVER_PASSWORDS=${KAFKA_ZOOKEEPER_PASSWORD}
      - ZOO_CLIENT_USER=${KAFKA_ZOOKEEPER_USER}
      - ZOO_CLIENT_PASSWORD=${KAFKA_ZOOKEEPER_PASSWORD}
      - ZOO_SERVER_ID=1
      - ZOO_SERVERS=zookeeper-1:2888:3888::1,zookeeper-2:2888:3888::2
    volumes:
      - zookeeper-1-data:/bitnami/zookeeper
    restart:
      unless-stopped
  zookeeper-2:
    container_name: zookeeper-2
    image: 'bitnami/zookeeper:3.8.0'
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_SERVER_USERS=${KAFKA_ZOOKEEPER_USER}
      - ZOO_SERVER_PASSWORDS=${KAFKA_ZOOKEEPER_PASSWORD}
      - ZOO_CLIENT_USER=${KAFKA_ZOOKEEPER_USER}
      - ZOO_CLIENT_PASSWORD=${KAFKA_ZOOKEEPER_PASSWORD}
      - ZOO_SERVER_ID=2
      - ZOO_SERVERS=zookeeper-1:2888:3888::1,zookeeper-2:2888:3888::2
    volumes:
      - zookeeper-2-data:/bitnami/zookeeper
    restart:
      unless-stopped
  kafka-1:
    container_name: kafka-1
    image: 'bitnami/kafka:3.1.1'
    depends_on:
      - zookeeper-1
      - zookeeper-2
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-1:2181,zookeeper-2:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_USER=${KAFKA_ZOOKEEPER_USER}
      - KAFKA_ZOOKEEPER_PASSWORD=${KAFKA_ZOOKEEPER_PASSWORD}
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_PROTOCOL=SASL
    volumes:
     - kafka-1-data:/bitnami/kafka
    restart:
      unless-stopped
  kafka-2:
    container_name: kafka-2
    image: 'bitnami/kafka:3.1.1'
    depends_on:
      - zookeeper-1
      - zookeeper-2
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-1:2181,zookeeper-2:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_USER=${KAFKA_ZOOKEEPER_USER}
      - KAFKA_ZOOKEEPER_PASSWORD=${KAFKA_ZOOKEEPER_PASSWORD}
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_PROTOCOL=SASL
    volumes:
     - kafka-2-data:/bitnami/kafka
    restart:
      unless-stopped
  kafka-3:
    container_name: kafka-3
    image: 'bitnami/kafka:3.1.1'
    depends_on:
      - zookeeper-1
      - zookeeper-2
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-1:2181,zookeeper-2:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_USER=${KAFKA_ZOOKEEPER_USER}
      - KAFKA_ZOOKEEPER_PASSWORD=${KAFKA_ZOOKEEPER_PASSWORD}
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_PROTOCOL=SASL
    volumes:
     - kafka-3-data:/bitnami/kafka
    restart:
      unless-stopped
  kafka-humio-gateway:
    container_name: kafka-humio-gateway
    image: registry.opensuse.org/security/sensor/containers/linux-security-sensor-kafka-humio-gateway:latest
    depends_on:
      - kafka-1
      - kafka-2
    volumes:
     - ./config/kafka-humio-gateway:/config
    restart:
      unless-stopped
  sensor-frontend:
    image: registry.opensuse.org/security/sensor/containers/linux-security-sensor:latest
    hostname: sensor-frontend
    container_name: sensor-frontend
    user: "1000:100"
    depends_on:
      - kafka-humio-gateway
    ports:
      - "8000:8000" # Frontend
      # - "8003:8003" # Monitoring
      # - "8001:8001" # gRPC endpoint (used for replication in multi-frontend environments)
      # - "8889:8889" # GUI - proxied by traefik
    volumes:
      - ./config/velociraptor:/config
      - ./data/velociraptor:/data
      - ./logs/velociraptor:/logs
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend.rule: "Host(`${SENSOR_GUI_HOSTNAME}`)"
      traefik.http.routers.frontend.entrypoints: web
      traefik.http.routers.frontend.middlewares: https_redirect
      traefik.http.routers.frontendtls.rule: "Host(`${SENSOR_GUI_HOSTNAME}`)"
      traefik.http.routers.frontendtls.entrypoints: websecure
      traefik.http.routers.frontendtls.tls: true
      traefik.http.routers.frontendtls.tls.certresolver: myresolver
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: https
      traefik.http.middlewares.https_redirect.redirectscheme.permanent: true
      traefik.http.services.frontend.loadbalancer.server.port: 8889
      traefik.http.services.frontend.loadbalancer.passhostheader: true
    restart:
      unless-stopped
  sensor-client:
    image: registry.opensuse.org/security/sensor/containers/linux-security-sensor:latest
    hostname: sensor-client
    container_name: sensor-client
    command: /usr/bin/velociraptor client --config /config/client.conf -v
    depends_on:
      - sensor-frontend
    volumes:
      - ./config/velociraptor:/config:ro
      - client-data:/var/lib/velociraptor-client
    restart:
      unless-stopped
